# Copyright 2018 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

CLUSTER       ?= prow
PROJECT       ?= knative-tests
ZONE          ?= us-central1-f
JOB_NAMESPACE ?= test-pods

PROW_DIR := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
TESTGRID_DIR := $(PROW_DIR)/../testgrid
SET_CONTEXT := gcloud container clusters get-credentials "$(CLUSTER)" --project="$(PROJECT)" --zone="$(ZONE)"
UNSET_CONTEXT := kubectl config unset current-context

get-cluster-credentials:
	$(SET_CONTEXT)

unset-cluster-credentials:
	$(UNSET_CONTEXT)

config:
	go run *_config.go --prow-config-output="$(PROW_DIR)/config.yaml" --testgrid-config-output="$(TESTGRID_DIR)/config.yaml" config_knative.yaml

# Update all prow job configs
update-config:
	$(SET_CONTEXT)
	$(eval OLD_YAML_CONFIG := $(shell mktemp))
	$(eval NEW_YAML_CONFIG := $(shell mktemp))
	$(eval GCS_DEST := gs://knative-prow/configs/config-$(shell date '+%Y_%m_%d_%H:%M:%S').yaml)
	@kubectl get configmap config -o jsonpath="{.data['config\.yaml']}" 2>/dev/null > "${OLD_YAML_CONFIG}"
	@gsutil cp "${OLD_YAML_CONFIG}" "${GCS_DEST}" > /dev/null
	@sed -e "s/((COMMIT_HASH_TOKEN))/$(shell git rev-parse HEAD)/" "config.yaml" > "${NEW_YAML_CONFIG}"
	kubectl create configmap config --from-file=config.yaml=${NEW_YAML_CONFIG} --dry-run -o yaml | kubectl replace configmap config -f -
	$(UNSET_CONTEXT)
	diff "${OLD_YAML_CONFIG}" "${NEW_YAML_CONFIG}" --color=auto || true
	@echo "Inspect uploaded config file at: ${NEW_YAML_CONFIG}"
	@echo "Old config file saved at: ${GCS_DEST}"

# Update plugins
update-plugins:
	$(SET_CONTEXT)
	kubectl create configmap plugins --from-file=plugins.yaml=plugins.yaml --dry-run -o yaml | kubectl replace configmap plugins -f -
	$(UNSET_CONTEXT)

# Update all deployments of boskos
update-all-boskos-deployments:
	$(SET_CONTEXT)
	@for f in $(shell ls boskos/deployments/*.yaml); do kubectl apply -f $${f}; done
	$(UNSET_CONTEXT)

# Update single deployment of boskos, expect passing in ${NAME} like `make update-single-boskos-deployment NAME=janitor`
update-single-boskos-deployment:
	$(SET_CONTEXT)
	kubectl apply -f boskos/deployments/$(NAME).yaml
	$(UNSET_CONTEXT)

update-boskos-resource:
	$(SET_CONTEXT)
	kubectl create configmap resources --from-file=config=boskos/resources.yaml --dry-run -o yaml | kubectl --namespace="$(JOB_NAMESPACE)" replace configmap resources -f -
	$(UNSET_CONTEXT)

# Update all deployment of cluster
update-all-cluster-deployments:
	$(SET_CONTEXT)
	@for f in $(shell ls deployments/*.yaml); do kubectl apply -f $${f}; done
	$(UNSET_CONTEXT)

# Update single deployment of cluster, expect passing in ${NAME} like `make update-single-cluster-deployment NAME=crier_deployment`
update-single-cluster-deployment:
	$(SET_CONTEXT)
	kubectl apply -f deployments/$(NAME).yaml
	$(UNSET_CONTEXT)

update-full: update-cluster-deployments update-config update-boskos-deployments

test:
	@echo "*** Checking config generator for prow and testgrid"
	$(eval TMP_YAML_PROW := $(shell mktemp))
	$(eval TMP_YAML_TESTGRID := $(shell mktemp))
	go run *_config.go --prow-config-output="$(TMP_YAML_PROW)" --testgrid-config-output="$(TMP_YAML_TESTGRID)" config_knative.yaml
	diff config.yaml $(TMP_YAML_PROW)
	diff $(TESTGRID_DIR)/config.yaml $(TMP_YAML_TESTGRID)
	@echo "*** Checking configs validity"
	bazel run @k8s//prow/cmd/checkconfig -- --plugin-config=$(PROW_DIR)/plugins.yaml --config-path=$(PROW_DIR)/config.yaml
	bazel run @k8s//testgrid/cmd/configurator -- \
		--yaml=$(TESTGRID_DIR)/config.yaml \
		--validate-config-file
