// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/mail/v1alpha3/cloud_mail.proto

package mail

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1 "google.golang.org/genproto/googleapis/iam/v1"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("google/cloud/mail/v1alpha3/cloud_mail.proto", fileDescriptor_21746e1e57ec24da)
}

var fileDescriptor_21746e1e57ec24da = []byte{
	// 1787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xdd, 0x6b, 0x1c, 0x55,
	0x14, 0xe7, 0x6e, 0xa1, 0xd0, 0x9b, 0x6d, 0x9b, 0x5c, 0x6b, 0x95, 0x6d, 0xe9, 0xc3, 0x45, 0x5a,
	0xdd, 0xa6, 0xbb, 0xcd, 0x26, 0x6d, 0xca, 0xa6, 0x49, 0x93, 0x6c, 0xd3, 0x6d, 0xb4, 0xb1, 0x69,
	0x3e, 0x2a, 0x04, 0x64, 0x99, 0xee, 0xde, 0xae, 0x53, 0x76, 0x77, 0xc6, 0x99, 0xd9, 0xd0, 0x52,
	0xfa, 0x22, 0xbe, 0xf9, 0xa4, 0xa2, 0x20, 0x46, 0xb1, 0x82, 0x50, 0x69, 0x85, 0xea, 0x83, 0xf8,
	0x81, 0x50, 0x41, 0x44, 0x7c, 0x11, 0x11, 0xf1, 0x1f, 0x50, 0xf4, 0xc1, 0xc7, 0xe2, 0xb3, 0xdc,
	0x8f, 0xd9, 0xdc, 0x99, 0xbd, 0x3b, 0x7b, 0x67, 0x36, 0x4f, 0xd9, 0xdd, 0xf9, 0x9d, 0x33, 0xbf,
	0xdf, 0x39, 0xf7, 0x9e, 0x33, 0xe7, 0x4e, 0xe0, 0xf1, 0xba, 0x65, 0xd5, 0x1b, 0x24, 0x5f, 0x6d,
	0x58, 0xed, 0x5a, 0xbe, 0x69, 0x98, 0x8d, 0xfc, 0xe6, 0x98, 0xd1, 0xb0, 0x5f, 0x31, 0xc6, 0xf9,
	0x6f, 0x15, 0xfa, 0x5b, 0xce, 0x76, 0x2c, 0xcf, 0x42, 0x19, 0x0e, 0xce, 0xb1, 0x0b, 0x39, 0x76,
	0xc1, 0x07, 0x67, 0x0e, 0x0b, 0x47, 0x86, 0x6d, 0xe6, 0x8d, 0x56, 0xcb, 0xf2, 0x0c, 0xcf, 0xb4,
	0x5a, 0x2e, 0xb7, 0xcc, 0x8c, 0x46, 0xdc, 0xc6, 0xa8, 0xd5, 0x1c, 0xe2, 0xba, 0x15, 0x97, 0x78,
	0x02, 0x7d, 0x2c, 0x02, 0x5d, 0xb3, 0x9a, 0x86, 0xd9, 0x12, 0xc0, 0xc9, 0x08, 0x20, 0xa1, 0x5f,
	0x2b, 0x9b, 0xc4, 0x31, 0xaf, 0x9b, 0xa4, 0x56, 0x11, 0x77, 0x11, 0x86, 0x27, 0x22, 0x0c, 0x1d,
	0x52, 0x25, 0xa6, 0xed, 0x55, 0x9c, 0x76, 0x83, 0x68, 0x10, 0x72, 0x49, 0xab, 0x46, 0x1c, 0x01,
	0x3c, 0x19, 0x05, 0x6c, 0x7a, 0x76, 0xa5, 0xea, 0x90, 0x1a, 0x69, 0x79, 0xa6, 0x21, 0x62, 0x9a,
	0x39, 0x22, 0x2c, 0x4c, 0xa3, 0x99, 0xdf, 0x1c, 0xa3, 0x7f, 0x2a, 0xb6, 0xd5, 0x30, 0xab, 0xb7,
	0xc4, 0xf5, 0x4c, 0xf0, 0x7a, 0xe0, 0xda, 0x21, 0x71, 0x8d, 0x7d, 0xbb, 0xd6, 0xbe, 0x9e, 0x27,
	0x4d, 0xdb, 0x13, 0x17, 0x0b, 0x0f, 0x2f, 0xc2, 0x3d, 0x25, 0x4a, 0x63, 0xc9, 0x30, 0x1b, 0x68,
	0x0b, 0xc0, 0xa1, 0x4b, 0xa6, 0xeb, 0x9d, 0x67, 0xe1, 0x73, 0x51, 0x2e, 0xd7, 0x3b, 0x97, 0x39,
	0x09, 0xb8, 0x42, 0x5e, 0x6d, 0x13, 0xd7, 0xcb, 0xe4, 0xb5, 0xf1, 0xae, 0x6d, 0xb5, 0x5c, 0x82,
	0x47, 0x5f, 0xfb, 0xed, 0xcf, 0xb7, 0x53, 0x47, 0xd1, 0x33, 0x72, 0x60, 0xeb, 0x74, 0x49, 0xe4,
	0x6f, 0xf3, 0x0f, 0xd3, 0xd9, 0x3b, 0x22, 0x9b, 0x2e, 0x7a, 0x03, 0xc0, 0x3d, 0x65, 0x22, 0x9c,
	0xa0, 0xd1, 0xa8, 0x9b, 0x75, 0x60, 0x3e, 0x35, 0x1c, 0x85, 0xe6, 0x50, 0x15, 0x9b, 0xdb, 0x2d,
	0xa3, 0x49, 0xa6, 0x7d, 0x4e, 0x59, 0x9f, 0x4a, 0x3e, 0x7b, 0x07, 0xbd, 0x07, 0x60, 0xba, 0xe4,
	0x10, 0xc3, 0x23, 0x82, 0x50, 0xa4, 0x7a, 0x19, 0x19, 0x87, 0xd3, 0x04, 0xe3, 0x94, 0xc3, 0x5a,
	0x11, 0x2a, 0xee, 0xe6, 0x1f, 0xd0, 0x47, 0x00, 0xa6, 0xd7, 0xed, 0x9a, 0x26, 0x37, 0x19, 0x19,
	0x87, 0xdb, 0x14, 0xe3, 0x76, 0xaa, 0x70, 0x5c, 0x8a, 0x97, 0xd8, 0x79, 0x3d, 0xc3, 0xd6, 0xa1,
	0xf8, 0x26, 0x80, 0xe9, 0xf3, 0xa4, 0x41, 0xf4, 0x28, 0xca, 0xc8, 0x04, 0x29, 0xcd, 0xea, 0xa5,
	0xf4, 0x2e, 0x80, 0xfb, 0xd6, 0x5b, 0x35, 0x99, 0xd5, 0x58, 0x64, 0xe0, 0x02, 0xd8, 0x38, 0xbc,
	0xce, 0x30, 0x5e, 0x05, 0x7c, 0x42, 0x87, 0x57, 0xb1, 0x2d, 0xee, 0x53, 0x04, 0x59, 0xf4, 0x16,
	0x80, 0x7b, 0x17, 0x6e, 0xda, 0xed, 0x56, 0xdd, 0xa7, 0x78, 0x32, 0xea, 0x7e, 0x01, 0xa8, 0xcf,
	0xf0, 0xa0, 0x6f, 0xe1, 0xd7, 0x84, 0xdc, 0x02, 0xad, 0x09, 0x78, 0x92, 0xb1, 0x1a, 0xc3, 0xa3,
	0x5a, 0xac, 0x08, 0x77, 0x4d, 0x49, 0x7d, 0x0f, 0xe0, 0xf0, 0x1a, 0x71, 0xbd, 0x15, 0x5e, 0x15,
	0x57, 0xda, 0x0d, 0xe2, 0xa2, 0xf1, 0x28, 0x5e, 0x61, 0xb4, 0x4f, 0x6d, 0x22, 0x9e, 0x91, 0xa8,
	0x23, 0xf3, 0x8c, 0xf8, 0x59, 0x3c, 0xd9, 0xb5, 0x12, 0xd5, 0xd4, 0xbd, 0x90, 0x23, 0xaa, 0xe1,
	0x7d, 0x00, 0xd3, 0x57, 0x69, 0x23, 0xb8, 0xa5, 0xb3, 0x20, 0x65, 0x64, 0x9c, 0xc4, 0x9f, 0x66,
	0x4c, 0x4f, 0xe2, 0xe3, 0x5a, 0x21, 0x66, 0x8d, 0xe9, 0x16, 0x65, 0xf7, 0x2f, 0x80, 0x19, 0x5a,
	0x41, 0x17, 0xa8, 0xd7, 0xab, 0xa2, 0x5f, 0xcd, 0xf1, 0x76, 0x45, 0x5c, 0x34, 0xdd, 0xaf, 0xf2,
	0xaa, 0xed, 0x7c, 0xe6, 0x33, 0x49, 0xcd, 0x45, 0xfc, 0x2f, 0x33, 0x55, 0x8b, 0xa8, 0x2c, 0xa9,
	0xb2, 0x0d, 0x87, 0xb4, 0xbc, 0x69, 0xdb, 0xb1, 0x6e, 0x90, 0xaa, 0x47, 0xe5, 0xa8, 0x2a, 0x17,
	0x51, 0xeb, 0xf9, 0x05, 0xc0, 0xa7, 0xca, 0x44, 0x79, 0x5b, 0x54, 0xec, 0x53, 0xf8, 0x55, 0x46,
	0xbe, 0xd0, 0xe8, 0xbd, 0xa2, 0x30, 0xc4, 0x17, 0x98, 0xb4, 0x59, 0x34, 0x13, 0x4e, 0xd8, 0xb6,
	0xb0, 0xfc, 0x76, 0xee, 0xd4, 0x72, 0x68, 0x6d, 0xf9, 0x0f, 0xc0, 0x0c, 0x6f, 0x02, 0x4a, 0x51,
	0xd3, 0xfd, 0x9b, 0xc7, 0xce, 0xea, 0xaa, 0x33, 0x5d, 0x06, 0xde, 0xa9, 0x94, 0x15, 0x0f, 0xaa,
	0x9f, 0xa5, 0xd0, 0xeb, 0x29, 0x98, 0xe1, 0x1d, 0x26, 0xbe, 0xf0, 0xde, 0x76, 0xc9, 0x85, 0xb7,
	0x99, 0x70, 0xab, 0xb0, 0x2e, 0x09, 0xef, 0xf1, 0x18, 0x98, 0x20, 0xcf, 0x3d, 0xc3, 0xf0, 0x3b,
	0x80, 0x19, 0xde, 0xc5, 0xe2, 0x87, 0xa1, 0xb7, 0xdd, 0xc0, 0xeb, 0x3a, 0x3b, 0xe8, 0xba, 0xfe,
	0x0b, 0xc0, 0xc3, 0x7e, 0x1f, 0x54, 0x2a, 0x3b, 0xa7, 0xd3, 0x41, 0x77, 0x56, 0xdb, 0x0a, 0xd3,
	0x76, 0x29, 0xb0, 0xb6, 0x93, 0xe4, 0x52, 0xee, 0xbb, 0x3f, 0x01, 0x78, 0x48, 0x34, 0x53, 0xa5,
	0xcc, 0x19, 0x8d, 0x2e, 0x1c, 0xa5, 0xb2, 0x57, 0x4f, 0xbe, 0xc2, 0xb4, 0xbc, 0x80, 0x2f, 0x0c,
	0xa8, 0x45, 0xea, 0xd6, 0x8f, 0x01, 0x7c, 0x5a, 0xdc, 0x56, 0x62, 0x54, 0x65, 0xb3, 0x18, 0x9a,
	0x8a, 0xd2, 0xd1, 0xcb, 0xca, 0x17, 0x71, 0x36, 0x99, 0xb1, 0xe8, 0x22, 0x2f, 0x33, 0xa9, 0x2f,
	0xe1, 0x95, 0x01, 0xa5, 0x3a, 0xfc, 0x46, 0xf2, 0x3d, 0xa8, 0xec, 0x1f, 0x01, 0x1c, 0xe2, 0x6d,
	0x9b, 0x51, 0x88, 0x9e, 0x6e, 0x24, 0x60, 0xf2, 0x75, 0xb8, 0xce, 0x04, 0x5d, 0xc6, 0xcf, 0x0f,
	0x28, 0x48, 0x22, 0x43, 0x85, 0x3c, 0x14, 0x63, 0xda, 0x2a, 0x1b, 0x2a, 0x35, 0xc6, 0x34, 0x01,
	0xd4, 0x1e, 0xd3, 0x3a, 0x78, 0x91, 0x98, 0x59, 0xa6, 0xa3, 0x88, 0xce, 0xc4, 0xee, 0x15, 0xae,
	0xa0, 0xf8, 0x2e, 0x1f, 0xdd, 0xb8, 0xe3, 0xbe, 0xa3, 0x1b, 0x87, 0x69, 0x3d, 0x56, 0x71, 0xa8,
	0xff, 0xe4, 0x8a, 0xf2, 0x5a, 0x91, 0x16, 0xac, 0x68, 0xf9, 0xfa, 0xac, 0x33, 0xc5, 0x09, 0x6e,
	0x1a, 0x53, 0x5c, 0x7c, 0x7a, 0x17, 0x19, 0xbd, 0x79, 0x9c, 0x38, 0x80, 0xc5, 0xdd, 0xfc, 0x03,
	0xba, 0xdf, 0x99, 0xec, 0x74, 0xf8, 0xca, 0xc8, 0x38, 0x7c, 0x45, 0x73, 0x28, 0x9c, 0x96, 0xf8,
	0x8a, 0x23, 0x0c, 0x9d, 0xa8, 0x76, 0xd8, 0x6e, 0x75, 0x86, 0x3c, 0x1d, 0xb6, 0x32, 0x32, 0x41,
	0xf2, 0xb3, 0xb1, 0x93, 0xff, 0x40, 0x9a, 0xf7, 0x04, 0x41, 0xad, 0x79, 0x2f, 0x3e, 0xc5, 0x12,
	0xa3, 0x38, 0x1d, 0x58, 0x00, 0x5a, 0x91, 0x94, 0x5b, 0xd0, 0x07, 0xdb, 0xa3, 0x9f, 0x60, 0xab,
	0x33, 0xfa, 0x05, 0xc9, 0xf6, 0x6a, 0x33, 0xaa, 0x09, 0x4a, 0x8b, 0xa0, 0xd4, 0x57, 0x3e, 0x07,
	0x70, 0x88, 0xde, 0x6d, 0x89, 0xb8, 0xae, 0x51, 0x27, 0xd1, 0x75, 0x49, 0x02, 0x6a, 0xd5, 0xa5,
	0x00, 0x5e, 0xd4, 0xa5, 0x39, 0x46, 0x7a, 0x0a, 0x77, 0x2f, 0xd3, 0xbe, 0xb4, 0xe9, 0x47, 0xca,
	0xf9, 0x57, 0x00, 0x9f, 0x60, 0x25, 0xaf, 0xe9, 0xd9, 0xa5, 0xce, 0xb1, 0x9b, 0x8b, 0x4e, 0xf7,
	0xad, 0x91, 0x41, 0x03, 0x5f, 0xc3, 0x64, 0x6c, 0x3b, 0xa1, 0x65, 0x91, 0x69, 0x29, 0xa1, 0xb9,
	0xa8, 0x12, 0xa1, 0xd4, 0xc2, 0xce, 0x0c, 0x65, 0xee, 0x8f, 0x00, 0x1c, 0xa1, 0x55, 0x34, 0xf0,
	0x33, 0x9a, 0xe8, 0x57, 0x74, 0x03, 0x70, 0x5f, 0x4f, 0x36, 0x32, 0x27, 0x01, 0x13, 0xa5, 0x04,
	0x8d, 0x35, 0x14, 0xe6, 0x4f, 0x77, 0xe6, 0x1f, 0x00, 0x1e, 0x10, 0xc5, 0x36, 0xa8, 0x62, 0x52,
	0xa3, 0x3c, 0x0f, 0x2c, 0x64, 0x83, 0x09, 0x59, 0xc3, 0x83, 0xe7, 0xa2, 0xb8, 0x3f, 0x74, 0xa0,
	0x8b, 0xfe, 0x06, 0xf0, 0x80, 0x28, 0xcb, 0x31, 0x94, 0xa9, 0x2c, 0x92, 0x28, 0xbb, 0xc1, 0x94,
	0xd5, 0x0a, 0x57, 0xe4, 0x1d, 0x13, 0x3a, 0x72, 0x4e, 0x96, 0xb2, 0x6e, 0xa5, 0x5f, 0x00, 0x78,
	0x40, 0x94, 0xf4, 0x18, 0x4a, 0x55, 0x16, 0xfd, 0x8a, 0x97, 0x58, 0x78, 0xd9, 0x1d, 0x58, 0x78,
	0xdf, 0x00, 0x38, 0x4c, 0xb7, 0xa9, 0xfe, 0x49, 0x56, 0x18, 0xad, 0x75, 0x92, 0xd5, 0x6d, 0x24,
	0xca, 0x80, 0x38, 0x53, 0x45, 0xe3, 0xdd, 0x4b, 0x4f, 0x75, 0x42, 0xe4, 0xbf, 0x87, 0xe0, 0x3c,
	0x3f, 0x05, 0x70, 0x5f, 0x99, 0xc8, 0x8e, 0xa3, 0xfb, 0x59, 0x10, 0xeb, 0x13, 0x3f, 0x16, 0xfd,
	0x10, 0xdf, 0xc1, 0x2b, 0xb9, 0xf6, 0x3a, 0xcb, 0x0a, 0x10, 0xa5, 0x81, 0xfe, 0x0e, 0xc0, 0x11,
	0xbe, 0x5f, 0x65, 0xba, 0x13, 0xfd, 0xb7, 0xf7, 0x20, 0x8c, 0xc5, 0x42, 0xc1, 0x49, 0xa2, 0x5b,
	0x4c, 0xcb, 0xef, 0x7c, 0xd0, 0xcf, 0x00, 0x8e, 0xf0, 0x5d, 0xa9, 0xcd, 0xbf, 0x0b, 0x1e, 0x9b,
	0xff, 0x55, 0xc6, 0x7f, 0xb9, 0x30, 0x2b, 0xf1, 0x0f, 0xbc, 0x89, 0xd2, 0x0d, 0x7f, 0x48, 0xcc,
	0x87, 0x00, 0x8e, 0xf0, 0x8d, 0xa7, 0x2d, 0xa6, 0x0b, 0xde, 0x6f, 0x93, 0x8a, 0xd5, 0x92, 0x4d,
	0xb4, 0x5a, 0xbe, 0x04, 0x70, 0x3f, 0xdd, 0x33, 0x62, 0x2c, 0x5a, 0x25, 0x9e, 0x8b, 0x0a, 0xfd,
	0x36, 0x98, 0x04, 0xf6, 0xc9, 0x8d, 0xc7, 0xb2, 0x11, 0x7b, 0xb2, 0xc8, 0x98, 0x4f, 0xa0, 0x82,
	0xe6, 0xaa, 0x31, 0x24, 0x92, 0x9f, 0x00, 0xb8, 0xb7, 0x4c, 0x24, 0xb7, 0xd1, 0xcf, 0x6c, 0x01,
	0xa8, 0x4f, 0xfa, 0x68, 0x94, 0xc5, 0x36, 0x5c, 0xc9, 0xb3, 0x67, 0x84, 0x25, 0x92, 0x34, 0xc0,
	0x5f, 0x01, 0x38, 0xcc, 0xf7, 0x97, 0x44, 0x75, 0xbc, 0xff, 0x6e, 0x4c, 0xce, 0xb6, 0xcc, 0xd8,
	0xce, 0xe1, 0x04, 0x51, 0x2d, 0x0e, 0x49, 0xaf, 0x83, 0xd1, 0x0f, 0x00, 0x0e, 0xf3, 0xad, 0xa5,
	0x4b, 0x3d, 0x8c, 0x8e, 0x4b, 0x7d, 0x95, 0x51, 0x5f, 0x2a, 0xc8, 0x67, 0x67, 0xf2, 0x0b, 0x6a,
	0xcd, 0xa0, 0x07, 0x65, 0xdc, 0x07, 0x70, 0x98, 0x6f, 0x2a, 0x5d, 0x19, 0x61, 0x74, 0xc2, 0xf5,
	0x92, 0x4d, 0xb2, 0x5e, 0xbe, 0x05, 0x10, 0xf9, 0xe3, 0x90, 0xc4, 0xf7, 0x94, 0xce, 0xf8, 0x94,
	0x9c, 0xb1, 0x98, 0x4b, 0xf1, 0x54, 0x7c, 0xc6, 0x81, 0x49, 0xea, 0x1e, 0x80, 0x23, 0x62, 0x3c,
	0x92, 0xc8, 0x4f, 0x68, 0x4c, 0x53, 0xdd, 0xdc, 0x7b, 0xd5, 0xbb, 0x05, 0xc6, 0xf5, 0x1c, 0x2e,
	0x26, 0xe0, 0x2a, 0x0d, 0x55, 0xff, 0xa4, 0x60, 0xba, 0x4c, 0xbc, 0x45, 0xa3, 0xb9, 0xcc, 0xde,
	0xea, 0xa3, 0xce, 0xb8, 0x69, 0x1a, 0xcd, 0xdc, 0xe6, 0x58, 0x4e, 0xbe, 0xe8, 0x73, 0x7a, 0x32,
	0x84, 0xe1, 0x57, 0xf1, 0x56, 0x8a, 0x71, 0x7a, 0x27, 0x85, 0x4e, 0x05, 0x1a, 0x88, 0x6b, 0xb5,
	0x9d, 0x6a, 0x8f, 0x57, 0x50, 0x75, 0xc9, 0xfd, 0xc6, 0x15, 0x74, 0x59, 0x65, 0x18, 0xf3, 0x38,
	0x2b, 0xe0, 0x72, 0x1e, 0xcd, 0x6a, 0xbb, 0x94, 0xe6, 0xb7, 0x80, 0x8f, 0x05, 0x54, 0xd2, 0xd4,
	0x13, 0x0e, 0xb4, 0xec, 0x06, 0x3d, 0x4e, 0xc1, 0xf4, 0x6a, 0x54, 0xa8, 0x57, 0xf5, 0x43, 0x7d,
	0x8f, 0x87, 0xfa, 0x6e, 0x0a, 0xeb, 0x87, 0xda, 0x95, 0xdc, 0x17, 0x41, 0x76, 0x63, 0x0d, 0xef,
	0x44, 0xb4, 0xc3, 0x5e, 0x17, 0x70, 0xa2, 0x80, 0x87, 0xdd, 0x5c, 0xc4, 0x49, 0x63, 0x1e, 0xf2,
	0x84, 0x1e, 0xec, 0x82, 0x68, 0x8d, 0xb8, 0xec, 0x47, 0xe2, 0x34, 0x4d, 0xd7, 0xa5, 0x1e, 0xd0,
	0xb3, 0xa1, 0xc0, 0x76, 0x43, 0xfc, 0x14, 0x3c, 0xa7, 0x81, 0x14, 0xad, 0xfc, 0x11, 0x4f, 0xcb,
	0xd7, 0xa9, 0x40, 0x09, 0x89, 0x4e, 0x8b, 0xd7, 0xe5, 0x8e, 0xea, 0xdf, 0xc0, 0xeb, 0x3b, 0x90,
	0x1c, 0xb5, 0xef, 0xe0, 0x69, 0xbf, 0x76, 0x8a, 0xd4, 0xce, 0x5e, 0xc4, 0x8b, 0x09, 0x13, 0xa5,
	0xf4, 0x37, 0x7f, 0x13, 0x1e, 0xa9, 0x5a, 0xcd, 0x88, 0x52, 0x39, 0xbf, 0xaf, 0xf3, 0x1f, 0x45,
	0xcb, 0xb4, 0x24, 0x2e, 0x83, 0x8d, 0x19, 0x81, 0xae, 0x5b, 0x0d, 0xa3, 0x55, 0xcf, 0x59, 0x4e,
	0x3d, 0x5f, 0x27, 0x2d, 0x56, 0x30, 0xf3, 0xfc, 0x92, 0x61, 0x9b, 0xae, 0xea, 0x1f, 0xa2, 0xa6,
	0xe8, 0xb7, 0x8f, 0x53, 0xbb, 0xca, 0xa5, 0xa5, 0x6b, 0xbb, 0x99, 0xc1, 0xf8, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x60, 0x7e, 0xdf, 0xb7, 0x8f, 0x26, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudMailClient is the client API for CloudMail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudMailClient interface {
	// Lists domains with the given parent.
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	// Gets the specified domain.
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// Registers the specified domain for Cloud Mail.
	// Cloudmail can provide a regional, per-project domain name e.g.
	// my-project.us-east1.cloudsmtp.net
	// where cloudmail manages all of the dns. These can be
	// created by calling CreateDomain with Domain.project_domain == true
	// and Domain.domain_name == "".
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// Updates the given domain.
	UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// Marks a domain as deleted. It will be automatically expunged after 30 days
	// unless it is undeleted with UndeleteDomain.
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// Removes the deleted status for a domain that was previously deleted with
	// DeleteDomain.
	UndeleteDomain(ctx context.Context, in *UndeleteDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// Permanently expunges a domain. Will only succeed on domains already marked
	// deleted using the DeleteDomain call.
	ExpungeDomain(ctx context.Context, in *ExpungeDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Evaluates a recipient address against the domain's receipt ruleset and
	// returns the list of rules that would fire.  Clients may provide an optional
	// alternative candidate ruleset to be evaluated instead of the service's
	// active ruleset.  This method can be used to verify Cloud Mail behavior for
	// incoming messages.
	TestReceiptRules(ctx context.Context, in *TestReceiptRulesRequest, opts ...grpc.CallOption) (*TestReceiptRulesResponse, error)
	// Checks the domain's DNS TXT record for the verification token, and updates
	// the status to ACTIVE if valid.
	VerifyDomain(ctx context.Context, in *VerifyDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// Lists EmailVerifiedAddresses with the given parent.
	ListEmailVerifiedAddresses(ctx context.Context, in *ListEmailVerifiedAddressesRequest, opts ...grpc.CallOption) (*ListEmailVerifiedAddressesResponse, error)
	// Gets the specified EmailVerifiedAddress.
	GetEmailVerifiedAddress(ctx context.Context, in *GetEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error)
	// Creates the given EmailVerifiedAddress.
	CreateEmailVerifiedAddress(ctx context.Context, in *CreateEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error)
	// Updates the given EmailVerifiedAddress.
	UpdateEmailVerifiedAddress(ctx context.Context, in *UpdateEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error)
	// Marks the specified EmailVerifiedAddress as deleted. It will be
	// automatically expunged after 30 days unless it is undeleted with
	// UndeleteEmailVerifiedAddress.
	DeleteEmailVerifiedAddress(ctx context.Context, in *DeleteEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error)
	// Undeletes the specified EmailVerifiedAddress.
	UndeleteEmailVerifiedAddress(ctx context.Context, in *UndeleteEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error)
	// Permanently expunges an EmailVerifiedAddress. Will only succeed on
	// resources already marked deleted using the DeleteEmailVerifiedAddress call.
	ExpungeEmailVerifiedAddress(ctx context.Context, in *ExpungeEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Emails a verification token to an unverified EmailVerifiedAddress.
	RequestEmailVerification(ctx context.Context, in *RequestEmailVerificationRequest, opts ...grpc.CallOption) (*RequestEmailVerificationResponse, error)
	// Checks token and verifies EmailVerifiedAddress
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error)
	// Lists senders for the given parent.
	ListSenders(ctx context.Context, in *ListSendersRequest, opts ...grpc.CallOption) (*ListSendersResponse, error)
	// Gets the specified sender.
	GetSender(ctx context.Context, in *GetSenderRequest, opts ...grpc.CallOption) (*Sender, error)
	// Creates the specified sender.
	CreateSender(ctx context.Context, in *CreateSenderRequest, opts ...grpc.CallOption) (*Sender, error)
	// Updates the specified sender.
	UpdateSender(ctx context.Context, in *UpdateSenderRequest, opts ...grpc.CallOption) (*Sender, error)
	// Marks the specified sender as deleted. It will be automatically expunged
	// after 30 days unless it is undeleted with UndeleteSender.
	DeleteSender(ctx context.Context, in *DeleteSenderRequest, opts ...grpc.CallOption) (*Sender, error)
	// Undeletes the specified sender.
	UndeleteSender(ctx context.Context, in *UndeleteSenderRequest, opts ...grpc.CallOption) (*Sender, error)
	// Permanently expunges a Sender. Will only succeed on resources already
	// marked deleted using the DeleteSender call.
	ExpungeSender(ctx context.Context, in *ExpungeSenderRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Sends a message using the specified sender.  The "From" address in the
	// message headers must be a registered and verified domain with the service,
	// and it must also match the sender's list of allowed "From" patterns;
	// otherwise, the request will fail with a FAILED_PRECONDITION error.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Lists SMTP credentials for the specified sender.
	ListSmtpCredentials(ctx context.Context, in *ListSmtpCredentialsRequest, opts ...grpc.CallOption) (*ListSmtpCredentialsResponse, error)
	// Gets the specified SMTP credential.
	GetSmtpCredential(ctx context.Context, in *GetSmtpCredentialRequest, opts ...grpc.CallOption) (*SmtpCredential, error)
	// Creates the specified SMTP credential.
	CreateSmtpCredential(ctx context.Context, in *CreateSmtpCredentialRequest, opts ...grpc.CallOption) (*SmtpCredential, error)
	// Updates the specified SMTP credential.
	UpdateSmtpCredential(ctx context.Context, in *UpdateSmtpCredentialRequest, opts ...grpc.CallOption) (*SmtpCredential, error)
	// Deletes the specified SMTP credential.
	DeleteSmtpCredential(ctx context.Context, in *DeleteSmtpCredentialRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists receipt rules for the specified Cloud Mail domain.
	ListReceiptRules(ctx context.Context, in *ListReceiptRulesRequest, opts ...grpc.CallOption) (*ListReceiptRulesResponse, error)
	// Gets the specified receipt rule.
	GetReceiptRule(ctx context.Context, in *GetReceiptRuleRequest, opts ...grpc.CallOption) (*ReceiptRule, error)
	// Creates the specified receipt rule.
	CreateReceiptRule(ctx context.Context, in *CreateReceiptRuleRequest, opts ...grpc.CallOption) (*ReceiptRule, error)
	// Updates the specified receipt rule.
	UpdateReceiptRule(ctx context.Context, in *UpdateReceiptRuleRequest, opts ...grpc.CallOption) (*ReceiptRule, error)
	// Deletes the specified receipt rule.  If the rule is part of the domain's
	// active ruleset, the rule reference is also removed from the ruleset.
	DeleteReceiptRule(ctx context.Context, in *DeleteReceiptRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists AddressSets for the specified Cloud Mail domain.
	ListAddressSets(ctx context.Context, in *ListAddressSetsRequest, opts ...grpc.CallOption) (*ListAddressSetsResponse, error)
	// Gets the specified AddressSet.
	GetAddressSet(ctx context.Context, in *GetAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error)
	// Creates the specified AddressSet.
	CreateAddressSet(ctx context.Context, in *CreateAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error)
	// Updates the specified AddressSet.
	UpdateAddressSet(ctx context.Context, in *UpdateAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error)
	// Marks the specified AddressSet as deleted. It will be automatically
	// expunged after 30 days unless it is undeleted with UndeleteAddressSet.
	DeleteAddressSet(ctx context.Context, in *DeleteAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error)
	// Undeletes the specified AddressSet.
	UndeleteAddressSet(ctx context.Context, in *UndeleteAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error)
	// Permanently expunges an AddressSet. Will only succeed on resources
	// already marked deleted using the DeleteAddressSet call.
	ExpungeAddressSet(ctx context.Context, in *ExpungeAddressSetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets the access control policy for Cloud Mail resources.
	// Returns an empty policy if the resource exists and does not have a policy
	// set.
	GetIamPolicy(ctx context.Context, in *v1.GetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error)
	// Sets the access control policy for a Cloud Mail Resources. Replaces
	// any existing policy.
	SetIamPolicy(ctx context.Context, in *v1.SetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error)
	// Returns permissions that a caller has on a Cloud Mail Resource.
	// If the resource does not exist, this will return an empty set of
	// permissions, not a [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
	//
	// Note: This operation is designed to be used for building permission-aware
	// UIs and command-line tools, not for authorization checking. This operation
	// may "fail open" without warning.
	TestIamPermissions(ctx context.Context, in *v1.TestIamPermissionsRequest, opts ...grpc.CallOption) (*v1.TestIamPermissionsResponse, error)
}

type cloudMailClient struct {
	cc *grpc.ClientConn
}

func NewCloudMailClient(cc *grpc.ClientConn) CloudMailClient {
	return &cloudMailClient{cc}
}

func (c *cloudMailClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ListDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UpdateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UndeleteDomain(ctx context.Context, in *UndeleteDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UndeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) ExpungeDomain(ctx context.Context, in *ExpungeDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ExpungeDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) TestReceiptRules(ctx context.Context, in *TestReceiptRulesRequest, opts ...grpc.CallOption) (*TestReceiptRulesResponse, error) {
	out := new(TestReceiptRulesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/TestReceiptRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) VerifyDomain(ctx context.Context, in *VerifyDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/VerifyDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) ListEmailVerifiedAddresses(ctx context.Context, in *ListEmailVerifiedAddressesRequest, opts ...grpc.CallOption) (*ListEmailVerifiedAddressesResponse, error) {
	out := new(ListEmailVerifiedAddressesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ListEmailVerifiedAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) GetEmailVerifiedAddress(ctx context.Context, in *GetEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error) {
	out := new(EmailVerifiedAddress)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/GetEmailVerifiedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) CreateEmailVerifiedAddress(ctx context.Context, in *CreateEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error) {
	out := new(EmailVerifiedAddress)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/CreateEmailVerifiedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UpdateEmailVerifiedAddress(ctx context.Context, in *UpdateEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error) {
	out := new(EmailVerifiedAddress)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UpdateEmailVerifiedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) DeleteEmailVerifiedAddress(ctx context.Context, in *DeleteEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error) {
	out := new(EmailVerifiedAddress)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/DeleteEmailVerifiedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UndeleteEmailVerifiedAddress(ctx context.Context, in *UndeleteEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error) {
	out := new(EmailVerifiedAddress)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UndeleteEmailVerifiedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) ExpungeEmailVerifiedAddress(ctx context.Context, in *ExpungeEmailVerifiedAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ExpungeEmailVerifiedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) RequestEmailVerification(ctx context.Context, in *RequestEmailVerificationRequest, opts ...grpc.CallOption) (*RequestEmailVerificationResponse, error) {
	out := new(RequestEmailVerificationResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/RequestEmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*EmailVerifiedAddress, error) {
	out := new(EmailVerifiedAddress)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) ListSenders(ctx context.Context, in *ListSendersRequest, opts ...grpc.CallOption) (*ListSendersResponse, error) {
	out := new(ListSendersResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ListSenders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) GetSender(ctx context.Context, in *GetSenderRequest, opts ...grpc.CallOption) (*Sender, error) {
	out := new(Sender)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/GetSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) CreateSender(ctx context.Context, in *CreateSenderRequest, opts ...grpc.CallOption) (*Sender, error) {
	out := new(Sender)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/CreateSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UpdateSender(ctx context.Context, in *UpdateSenderRequest, opts ...grpc.CallOption) (*Sender, error) {
	out := new(Sender)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UpdateSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) DeleteSender(ctx context.Context, in *DeleteSenderRequest, opts ...grpc.CallOption) (*Sender, error) {
	out := new(Sender)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/DeleteSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UndeleteSender(ctx context.Context, in *UndeleteSenderRequest, opts ...grpc.CallOption) (*Sender, error) {
	out := new(Sender)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UndeleteSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) ExpungeSender(ctx context.Context, in *ExpungeSenderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ExpungeSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) ListSmtpCredentials(ctx context.Context, in *ListSmtpCredentialsRequest, opts ...grpc.CallOption) (*ListSmtpCredentialsResponse, error) {
	out := new(ListSmtpCredentialsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ListSmtpCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) GetSmtpCredential(ctx context.Context, in *GetSmtpCredentialRequest, opts ...grpc.CallOption) (*SmtpCredential, error) {
	out := new(SmtpCredential)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/GetSmtpCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) CreateSmtpCredential(ctx context.Context, in *CreateSmtpCredentialRequest, opts ...grpc.CallOption) (*SmtpCredential, error) {
	out := new(SmtpCredential)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/CreateSmtpCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UpdateSmtpCredential(ctx context.Context, in *UpdateSmtpCredentialRequest, opts ...grpc.CallOption) (*SmtpCredential, error) {
	out := new(SmtpCredential)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UpdateSmtpCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) DeleteSmtpCredential(ctx context.Context, in *DeleteSmtpCredentialRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/DeleteSmtpCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) ListReceiptRules(ctx context.Context, in *ListReceiptRulesRequest, opts ...grpc.CallOption) (*ListReceiptRulesResponse, error) {
	out := new(ListReceiptRulesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ListReceiptRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) GetReceiptRule(ctx context.Context, in *GetReceiptRuleRequest, opts ...grpc.CallOption) (*ReceiptRule, error) {
	out := new(ReceiptRule)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/GetReceiptRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) CreateReceiptRule(ctx context.Context, in *CreateReceiptRuleRequest, opts ...grpc.CallOption) (*ReceiptRule, error) {
	out := new(ReceiptRule)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/CreateReceiptRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UpdateReceiptRule(ctx context.Context, in *UpdateReceiptRuleRequest, opts ...grpc.CallOption) (*ReceiptRule, error) {
	out := new(ReceiptRule)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UpdateReceiptRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) DeleteReceiptRule(ctx context.Context, in *DeleteReceiptRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/DeleteReceiptRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) ListAddressSets(ctx context.Context, in *ListAddressSetsRequest, opts ...grpc.CallOption) (*ListAddressSetsResponse, error) {
	out := new(ListAddressSetsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ListAddressSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) GetAddressSet(ctx context.Context, in *GetAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error) {
	out := new(AddressSet)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/GetAddressSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) CreateAddressSet(ctx context.Context, in *CreateAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error) {
	out := new(AddressSet)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/CreateAddressSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UpdateAddressSet(ctx context.Context, in *UpdateAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error) {
	out := new(AddressSet)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UpdateAddressSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) DeleteAddressSet(ctx context.Context, in *DeleteAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error) {
	out := new(AddressSet)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/DeleteAddressSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) UndeleteAddressSet(ctx context.Context, in *UndeleteAddressSetRequest, opts ...grpc.CallOption) (*AddressSet, error) {
	out := new(AddressSet)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/UndeleteAddressSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) ExpungeAddressSet(ctx context.Context, in *ExpungeAddressSetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/ExpungeAddressSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) GetIamPolicy(ctx context.Context, in *v1.GetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error) {
	out := new(v1.Policy)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/GetIamPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) SetIamPolicy(ctx context.Context, in *v1.SetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error) {
	out := new(v1.Policy)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/SetIamPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMailClient) TestIamPermissions(ctx context.Context, in *v1.TestIamPermissionsRequest, opts ...grpc.CallOption) (*v1.TestIamPermissionsResponse, error) {
	out := new(v1.TestIamPermissionsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.mail.v1alpha3.CloudMail/TestIamPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudMailServer is the server API for CloudMail service.
type CloudMailServer interface {
	// Lists domains with the given parent.
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	// Gets the specified domain.
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	// Registers the specified domain for Cloud Mail.
	// Cloudmail can provide a regional, per-project domain name e.g.
	// my-project.us-east1.cloudsmtp.net
	// where cloudmail manages all of the dns. These can be
	// created by calling CreateDomain with Domain.project_domain == true
	// and Domain.domain_name == "".
	CreateDomain(context.Context, *CreateDomainRequest) (*Domain, error)
	// Updates the given domain.
	UpdateDomain(context.Context, *UpdateDomainRequest) (*Domain, error)
	// Marks a domain as deleted. It will be automatically expunged after 30 days
	// unless it is undeleted with UndeleteDomain.
	DeleteDomain(context.Context, *DeleteDomainRequest) (*Domain, error)
	// Removes the deleted status for a domain that was previously deleted with
	// DeleteDomain.
	UndeleteDomain(context.Context, *UndeleteDomainRequest) (*Domain, error)
	// Permanently expunges a domain. Will only succeed on domains already marked
	// deleted using the DeleteDomain call.
	ExpungeDomain(context.Context, *ExpungeDomainRequest) (*empty.Empty, error)
	// Evaluates a recipient address against the domain's receipt ruleset and
	// returns the list of rules that would fire.  Clients may provide an optional
	// alternative candidate ruleset to be evaluated instead of the service's
	// active ruleset.  This method can be used to verify Cloud Mail behavior for
	// incoming messages.
	TestReceiptRules(context.Context, *TestReceiptRulesRequest) (*TestReceiptRulesResponse, error)
	// Checks the domain's DNS TXT record for the verification token, and updates
	// the status to ACTIVE if valid.
	VerifyDomain(context.Context, *VerifyDomainRequest) (*Domain, error)
	// Lists EmailVerifiedAddresses with the given parent.
	ListEmailVerifiedAddresses(context.Context, *ListEmailVerifiedAddressesRequest) (*ListEmailVerifiedAddressesResponse, error)
	// Gets the specified EmailVerifiedAddress.
	GetEmailVerifiedAddress(context.Context, *GetEmailVerifiedAddressRequest) (*EmailVerifiedAddress, error)
	// Creates the given EmailVerifiedAddress.
	CreateEmailVerifiedAddress(context.Context, *CreateEmailVerifiedAddressRequest) (*EmailVerifiedAddress, error)
	// Updates the given EmailVerifiedAddress.
	UpdateEmailVerifiedAddress(context.Context, *UpdateEmailVerifiedAddressRequest) (*EmailVerifiedAddress, error)
	// Marks the specified EmailVerifiedAddress as deleted. It will be
	// automatically expunged after 30 days unless it is undeleted with
	// UndeleteEmailVerifiedAddress.
	DeleteEmailVerifiedAddress(context.Context, *DeleteEmailVerifiedAddressRequest) (*EmailVerifiedAddress, error)
	// Undeletes the specified EmailVerifiedAddress.
	UndeleteEmailVerifiedAddress(context.Context, *UndeleteEmailVerifiedAddressRequest) (*EmailVerifiedAddress, error)
	// Permanently expunges an EmailVerifiedAddress. Will only succeed on
	// resources already marked deleted using the DeleteEmailVerifiedAddress call.
	ExpungeEmailVerifiedAddress(context.Context, *ExpungeEmailVerifiedAddressRequest) (*empty.Empty, error)
	// Emails a verification token to an unverified EmailVerifiedAddress.
	RequestEmailVerification(context.Context, *RequestEmailVerificationRequest) (*RequestEmailVerificationResponse, error)
	// Checks token and verifies EmailVerifiedAddress
	VerifyEmail(context.Context, *VerifyEmailRequest) (*EmailVerifiedAddress, error)
	// Lists senders for the given parent.
	ListSenders(context.Context, *ListSendersRequest) (*ListSendersResponse, error)
	// Gets the specified sender.
	GetSender(context.Context, *GetSenderRequest) (*Sender, error)
	// Creates the specified sender.
	CreateSender(context.Context, *CreateSenderRequest) (*Sender, error)
	// Updates the specified sender.
	UpdateSender(context.Context, *UpdateSenderRequest) (*Sender, error)
	// Marks the specified sender as deleted. It will be automatically expunged
	// after 30 days unless it is undeleted with UndeleteSender.
	DeleteSender(context.Context, *DeleteSenderRequest) (*Sender, error)
	// Undeletes the specified sender.
	UndeleteSender(context.Context, *UndeleteSenderRequest) (*Sender, error)
	// Permanently expunges a Sender. Will only succeed on resources already
	// marked deleted using the DeleteSender call.
	ExpungeSender(context.Context, *ExpungeSenderRequest) (*empty.Empty, error)
	// Sends a message using the specified sender.  The "From" address in the
	// message headers must be a registered and verified domain with the service,
	// and it must also match the sender's list of allowed "From" patterns;
	// otherwise, the request will fail with a FAILED_PRECONDITION error.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// Lists SMTP credentials for the specified sender.
	ListSmtpCredentials(context.Context, *ListSmtpCredentialsRequest) (*ListSmtpCredentialsResponse, error)
	// Gets the specified SMTP credential.
	GetSmtpCredential(context.Context, *GetSmtpCredentialRequest) (*SmtpCredential, error)
	// Creates the specified SMTP credential.
	CreateSmtpCredential(context.Context, *CreateSmtpCredentialRequest) (*SmtpCredential, error)
	// Updates the specified SMTP credential.
	UpdateSmtpCredential(context.Context, *UpdateSmtpCredentialRequest) (*SmtpCredential, error)
	// Deletes the specified SMTP credential.
	DeleteSmtpCredential(context.Context, *DeleteSmtpCredentialRequest) (*empty.Empty, error)
	// Lists receipt rules for the specified Cloud Mail domain.
	ListReceiptRules(context.Context, *ListReceiptRulesRequest) (*ListReceiptRulesResponse, error)
	// Gets the specified receipt rule.
	GetReceiptRule(context.Context, *GetReceiptRuleRequest) (*ReceiptRule, error)
	// Creates the specified receipt rule.
	CreateReceiptRule(context.Context, *CreateReceiptRuleRequest) (*ReceiptRule, error)
	// Updates the specified receipt rule.
	UpdateReceiptRule(context.Context, *UpdateReceiptRuleRequest) (*ReceiptRule, error)
	// Deletes the specified receipt rule.  If the rule is part of the domain's
	// active ruleset, the rule reference is also removed from the ruleset.
	DeleteReceiptRule(context.Context, *DeleteReceiptRuleRequest) (*empty.Empty, error)
	// Lists AddressSets for the specified Cloud Mail domain.
	ListAddressSets(context.Context, *ListAddressSetsRequest) (*ListAddressSetsResponse, error)
	// Gets the specified AddressSet.
	GetAddressSet(context.Context, *GetAddressSetRequest) (*AddressSet, error)
	// Creates the specified AddressSet.
	CreateAddressSet(context.Context, *CreateAddressSetRequest) (*AddressSet, error)
	// Updates the specified AddressSet.
	UpdateAddressSet(context.Context, *UpdateAddressSetRequest) (*AddressSet, error)
	// Marks the specified AddressSet as deleted. It will be automatically
	// expunged after 30 days unless it is undeleted with UndeleteAddressSet.
	DeleteAddressSet(context.Context, *DeleteAddressSetRequest) (*AddressSet, error)
	// Undeletes the specified AddressSet.
	UndeleteAddressSet(context.Context, *UndeleteAddressSetRequest) (*AddressSet, error)
	// Permanently expunges an AddressSet. Will only succeed on resources
	// already marked deleted using the DeleteAddressSet call.
	ExpungeAddressSet(context.Context, *ExpungeAddressSetRequest) (*empty.Empty, error)
	// Gets the access control policy for Cloud Mail resources.
	// Returns an empty policy if the resource exists and does not have a policy
	// set.
	GetIamPolicy(context.Context, *v1.GetIamPolicyRequest) (*v1.Policy, error)
	// Sets the access control policy for a Cloud Mail Resources. Replaces
	// any existing policy.
	SetIamPolicy(context.Context, *v1.SetIamPolicyRequest) (*v1.Policy, error)
	// Returns permissions that a caller has on a Cloud Mail Resource.
	// If the resource does not exist, this will return an empty set of
	// permissions, not a [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
	//
	// Note: This operation is designed to be used for building permission-aware
	// UIs and command-line tools, not for authorization checking. This operation
	// may "fail open" without warning.
	TestIamPermissions(context.Context, *v1.TestIamPermissionsRequest) (*v1.TestIamPermissionsResponse, error)
}

func RegisterCloudMailServer(s *grpc.Server, srv CloudMailServer) {
	s.RegisterService(&_CloudMail_serviceDesc, srv)
}

func _CloudMail_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UpdateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UpdateDomain(ctx, req.(*UpdateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UndeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UndeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UndeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UndeleteDomain(ctx, req.(*UndeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_ExpungeDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpungeDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ExpungeDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ExpungeDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ExpungeDomain(ctx, req.(*ExpungeDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_TestReceiptRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReceiptRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).TestReceiptRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/TestReceiptRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).TestReceiptRules(ctx, req.(*TestReceiptRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_VerifyDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).VerifyDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/VerifyDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).VerifyDomain(ctx, req.(*VerifyDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_ListEmailVerifiedAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailVerifiedAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ListEmailVerifiedAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ListEmailVerifiedAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ListEmailVerifiedAddresses(ctx, req.(*ListEmailVerifiedAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_GetEmailVerifiedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailVerifiedAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).GetEmailVerifiedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/GetEmailVerifiedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).GetEmailVerifiedAddress(ctx, req.(*GetEmailVerifiedAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_CreateEmailVerifiedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailVerifiedAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).CreateEmailVerifiedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/CreateEmailVerifiedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).CreateEmailVerifiedAddress(ctx, req.(*CreateEmailVerifiedAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UpdateEmailVerifiedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailVerifiedAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UpdateEmailVerifiedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UpdateEmailVerifiedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UpdateEmailVerifiedAddress(ctx, req.(*UpdateEmailVerifiedAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_DeleteEmailVerifiedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailVerifiedAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).DeleteEmailVerifiedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/DeleteEmailVerifiedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).DeleteEmailVerifiedAddress(ctx, req.(*DeleteEmailVerifiedAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UndeleteEmailVerifiedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteEmailVerifiedAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UndeleteEmailVerifiedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UndeleteEmailVerifiedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UndeleteEmailVerifiedAddress(ctx, req.(*UndeleteEmailVerifiedAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_ExpungeEmailVerifiedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpungeEmailVerifiedAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ExpungeEmailVerifiedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ExpungeEmailVerifiedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ExpungeEmailVerifiedAddress(ctx, req.(*ExpungeEmailVerifiedAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_RequestEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).RequestEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/RequestEmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).RequestEmailVerification(ctx, req.(*RequestEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_ListSenders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSendersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ListSenders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ListSenders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ListSenders(ctx, req.(*ListSendersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_GetSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).GetSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/GetSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).GetSender(ctx, req.(*GetSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_CreateSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).CreateSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/CreateSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).CreateSender(ctx, req.(*CreateSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UpdateSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UpdateSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UpdateSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UpdateSender(ctx, req.(*UpdateSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_DeleteSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).DeleteSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/DeleteSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).DeleteSender(ctx, req.(*DeleteSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UndeleteSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UndeleteSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UndeleteSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UndeleteSender(ctx, req.(*UndeleteSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_ExpungeSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpungeSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ExpungeSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ExpungeSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ExpungeSender(ctx, req.(*ExpungeSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_ListSmtpCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmtpCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ListSmtpCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ListSmtpCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ListSmtpCredentials(ctx, req.(*ListSmtpCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_GetSmtpCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmtpCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).GetSmtpCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/GetSmtpCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).GetSmtpCredential(ctx, req.(*GetSmtpCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_CreateSmtpCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmtpCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).CreateSmtpCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/CreateSmtpCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).CreateSmtpCredential(ctx, req.(*CreateSmtpCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UpdateSmtpCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSmtpCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UpdateSmtpCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UpdateSmtpCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UpdateSmtpCredential(ctx, req.(*UpdateSmtpCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_DeleteSmtpCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmtpCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).DeleteSmtpCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/DeleteSmtpCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).DeleteSmtpCredential(ctx, req.(*DeleteSmtpCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_ListReceiptRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReceiptRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ListReceiptRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ListReceiptRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ListReceiptRules(ctx, req.(*ListReceiptRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_GetReceiptRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).GetReceiptRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/GetReceiptRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).GetReceiptRule(ctx, req.(*GetReceiptRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_CreateReceiptRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiptRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).CreateReceiptRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/CreateReceiptRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).CreateReceiptRule(ctx, req.(*CreateReceiptRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UpdateReceiptRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiptRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UpdateReceiptRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UpdateReceiptRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UpdateReceiptRule(ctx, req.(*UpdateReceiptRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_DeleteReceiptRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiptRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).DeleteReceiptRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/DeleteReceiptRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).DeleteReceiptRule(ctx, req.(*DeleteReceiptRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_ListAddressSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ListAddressSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ListAddressSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ListAddressSets(ctx, req.(*ListAddressSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_GetAddressSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).GetAddressSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/GetAddressSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).GetAddressSet(ctx, req.(*GetAddressSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_CreateAddressSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).CreateAddressSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/CreateAddressSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).CreateAddressSet(ctx, req.(*CreateAddressSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UpdateAddressSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UpdateAddressSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UpdateAddressSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UpdateAddressSet(ctx, req.(*UpdateAddressSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_DeleteAddressSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).DeleteAddressSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/DeleteAddressSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).DeleteAddressSet(ctx, req.(*DeleteAddressSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_UndeleteAddressSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteAddressSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).UndeleteAddressSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/UndeleteAddressSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).UndeleteAddressSet(ctx, req.(*UndeleteAddressSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_ExpungeAddressSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpungeAddressSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).ExpungeAddressSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/ExpungeAddressSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).ExpungeAddressSet(ctx, req.(*ExpungeAddressSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_GetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).GetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/GetIamPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).GetIamPolicy(ctx, req.(*v1.GetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_SetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).SetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/SetIamPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).SetIamPolicy(ctx, req.(*v1.SetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMail_TestIamPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.TestIamPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMailServer).TestIamPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.mail.v1alpha3.CloudMail/TestIamPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMailServer).TestIamPermissions(ctx, req.(*v1.TestIamPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudMail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.mail.v1alpha3.CloudMail",
	HandlerType: (*CloudMailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDomains",
			Handler:    _CloudMail_ListDomains_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _CloudMail_GetDomain_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _CloudMail_CreateDomain_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _CloudMail_UpdateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _CloudMail_DeleteDomain_Handler,
		},
		{
			MethodName: "UndeleteDomain",
			Handler:    _CloudMail_UndeleteDomain_Handler,
		},
		{
			MethodName: "ExpungeDomain",
			Handler:    _CloudMail_ExpungeDomain_Handler,
		},
		{
			MethodName: "TestReceiptRules",
			Handler:    _CloudMail_TestReceiptRules_Handler,
		},
		{
			MethodName: "VerifyDomain",
			Handler:    _CloudMail_VerifyDomain_Handler,
		},
		{
			MethodName: "ListEmailVerifiedAddresses",
			Handler:    _CloudMail_ListEmailVerifiedAddresses_Handler,
		},
		{
			MethodName: "GetEmailVerifiedAddress",
			Handler:    _CloudMail_GetEmailVerifiedAddress_Handler,
		},
		{
			MethodName: "CreateEmailVerifiedAddress",
			Handler:    _CloudMail_CreateEmailVerifiedAddress_Handler,
		},
		{
			MethodName: "UpdateEmailVerifiedAddress",
			Handler:    _CloudMail_UpdateEmailVerifiedAddress_Handler,
		},
		{
			MethodName: "DeleteEmailVerifiedAddress",
			Handler:    _CloudMail_DeleteEmailVerifiedAddress_Handler,
		},
		{
			MethodName: "UndeleteEmailVerifiedAddress",
			Handler:    _CloudMail_UndeleteEmailVerifiedAddress_Handler,
		},
		{
			MethodName: "ExpungeEmailVerifiedAddress",
			Handler:    _CloudMail_ExpungeEmailVerifiedAddress_Handler,
		},
		{
			MethodName: "RequestEmailVerification",
			Handler:    _CloudMail_RequestEmailVerification_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _CloudMail_VerifyEmail_Handler,
		},
		{
			MethodName: "ListSenders",
			Handler:    _CloudMail_ListSenders_Handler,
		},
		{
			MethodName: "GetSender",
			Handler:    _CloudMail_GetSender_Handler,
		},
		{
			MethodName: "CreateSender",
			Handler:    _CloudMail_CreateSender_Handler,
		},
		{
			MethodName: "UpdateSender",
			Handler:    _CloudMail_UpdateSender_Handler,
		},
		{
			MethodName: "DeleteSender",
			Handler:    _CloudMail_DeleteSender_Handler,
		},
		{
			MethodName: "UndeleteSender",
			Handler:    _CloudMail_UndeleteSender_Handler,
		},
		{
			MethodName: "ExpungeSender",
			Handler:    _CloudMail_ExpungeSender_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _CloudMail_SendMessage_Handler,
		},
		{
			MethodName: "ListSmtpCredentials",
			Handler:    _CloudMail_ListSmtpCredentials_Handler,
		},
		{
			MethodName: "GetSmtpCredential",
			Handler:    _CloudMail_GetSmtpCredential_Handler,
		},
		{
			MethodName: "CreateSmtpCredential",
			Handler:    _CloudMail_CreateSmtpCredential_Handler,
		},
		{
			MethodName: "UpdateSmtpCredential",
			Handler:    _CloudMail_UpdateSmtpCredential_Handler,
		},
		{
			MethodName: "DeleteSmtpCredential",
			Handler:    _CloudMail_DeleteSmtpCredential_Handler,
		},
		{
			MethodName: "ListReceiptRules",
			Handler:    _CloudMail_ListReceiptRules_Handler,
		},
		{
			MethodName: "GetReceiptRule",
			Handler:    _CloudMail_GetReceiptRule_Handler,
		},
		{
			MethodName: "CreateReceiptRule",
			Handler:    _CloudMail_CreateReceiptRule_Handler,
		},
		{
			MethodName: "UpdateReceiptRule",
			Handler:    _CloudMail_UpdateReceiptRule_Handler,
		},
		{
			MethodName: "DeleteReceiptRule",
			Handler:    _CloudMail_DeleteReceiptRule_Handler,
		},
		{
			MethodName: "ListAddressSets",
			Handler:    _CloudMail_ListAddressSets_Handler,
		},
		{
			MethodName: "GetAddressSet",
			Handler:    _CloudMail_GetAddressSet_Handler,
		},
		{
			MethodName: "CreateAddressSet",
			Handler:    _CloudMail_CreateAddressSet_Handler,
		},
		{
			MethodName: "UpdateAddressSet",
			Handler:    _CloudMail_UpdateAddressSet_Handler,
		},
		{
			MethodName: "DeleteAddressSet",
			Handler:    _CloudMail_DeleteAddressSet_Handler,
		},
		{
			MethodName: "UndeleteAddressSet",
			Handler:    _CloudMail_UndeleteAddressSet_Handler,
		},
		{
			MethodName: "ExpungeAddressSet",
			Handler:    _CloudMail_ExpungeAddressSet_Handler,
		},
		{
			MethodName: "GetIamPolicy",
			Handler:    _CloudMail_GetIamPolicy_Handler,
		},
		{
			MethodName: "SetIamPolicy",
			Handler:    _CloudMail_SetIamPolicy_Handler,
		},
		{
			MethodName: "TestIamPermissions",
			Handler:    _CloudMail_TestIamPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/mail/v1alpha3/cloud_mail.proto",
}
