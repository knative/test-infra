/*
Copyright 2022 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package pkg

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"knative.dev/test-infra/pkg/testgrid"

	"k8s.io/apimachinery/pkg/util/sets"
	"k8s.io/test-infra/prow/config"
	"sigs.k8s.io/yaml"
)

const (
	testgridConfigFileHeader = `# #######################################################################
# ####                                                               ####
# ####      THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.       ####
# ####   USE "./hack/generate-configs.sh" TO REGENERATE THIS FILE.   ####
# ####                                                               ####
# #######################################################################
# Dashboards need to be specified here to be created on TestGrid
# A prow annotation will be invalid if it references a dashboard that doesn't exist
`
)

var (
	dashboardNames = sets.NewString()
	// Key is the dashboard group name, value is the dashboard names
	dashboardGroupsMap = map[string]sets.String{}
)

func GenerateTestGridConfig(prowJobsConfig, testGridConfigOutput string) error {

	if err := filepath.WalkDir(prowJobsConfig, func(path string, d os.DirEntry, err error) error {
		log.Printf("Parsing TestGrid annotations for %q", path)
		// Skip directory, base config file and other unrelated files.
		if d.IsDir() || !strings.HasSuffix(path, ".yaml") {
			return nil
		}

		jobConfig := &config.JobConfig{}
		bs, err := ioutil.ReadFile(path)
		if err != nil {
			return fmt.Errorf("error reading file %q: %w", path, err)
		}
		if err := yaml.Unmarshal(bs, jobConfig); err != nil {
			return fmt.Errorf("error parsing Prow job config %q: %w", path, err)
		}

		parseTestGridAnnotations(jobConfig)

		return nil
	}); err != nil {
		return fmt.Errorf("error walking dir %q: %w", prowJobsConfig, err)
	}

	if err := writeTestGridConfig(testGridConfigOutput); err != nil {
		return fmt.Errorf("error writing generated TestGrid config to %q: %w", testGridConfigOutput, err)
	}

	return nil
}

// parseTestGridAnnotations parse the testgrid annotations in the Prow jobs
// config
func parseTestGridAnnotations(jobConfig *config.JobConfig) {
	for _, periodic := range jobConfig.Periodics {
		dashboardName := periodic.Annotations[testgridDashboardAnnotation]
		dashboardTabName := periodic.Annotations[testgridDashboardTabAnnoation]
		if dashboardName == "" || dashboardTabName == "" {
			continue
		}
		if len(periodic.ExtraRefs) == 0 {
			continue
		}

		dashboardNames.Insert(dashboardName)

		org := periodic.ExtraRefs[0].Org
		branch := periodic.ExtraRefs[0].BaseRef
		// If the job is for the main branch, add the dashboard to the
		// dashboard group for the corresponding org.
		if branch == "main" {
			if _, ok := dashboardGroupsMap[org]; !ok {
				dashboardGroupsMap[org] = sets.NewString()
			}
			dashboardGroupsMap[org].Insert(dashboardName)
		}
	}
}

// writeTestGridConfig generate the final testgrid Config and write it to the
// config file.
func writeTestGridConfig(testGridConfigOutput string) error {
	// Constructure the final TestGrid Config.
	dashboards := []testgrid.Dashboard{}
	for _, name := range dashboardNames.List() {
		dashboards = append(dashboards, testgrid.Dashboard{Name: name})
	}
	dashboardGroups := []testgrid.DashboardGroup{}

	// Sort the dashborad group names to ensure the sequence.
	dgNames := []string{}
	for dg := range dashboardGroupsMap {
		dgNames = append(dgNames, dg)
	}
	sort.Strings(dgNames)
	for _, dg := range dgNames {
		ds := dashboardGroupsMap[dg]
		dashboardGroup := testgrid.DashboardGroup{Name: dg, DashboardNames: ds.List()}
		dashboardGroups = append(dashboardGroups, dashboardGroup)
	}
	config := testgrid.Config{Dashboards: dashboards, DashboardGroups: dashboardGroups}

	// Write TestGrid Config to the output file.
	log.Printf("Writing the generated TestGrid config to %q", testGridConfigOutput)
	bs, _ := yaml.Marshal(config)
	bs = append([]byte(testgridConfigFileHeader), bs...)
	return ioutil.WriteFile(testGridConfigOutput, bs, 0o644)
}
