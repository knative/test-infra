/*
Copyright 2022 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// release-jobs-syncer fetches latest release branches,
// and creates PRs to update Prow jobs for them in knative/test-infra

package main

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"knative.dev/test-infra/tools/provenance-generator/pkg"
)

func main() {

	config := pkg.Config{
		EntryPointOptsVariable: "ENTRYPOINT_OPTIONS",
	}

	rootCmd := &cobra.Command{
		Long: `Knative SLSA Provenance Generator. This tool reads information from prow and generates a SLSA attestation.
  SLSA Specification https://slsa.dev/provenance/v0.2`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			//Check if either image-refs or file-checksums is set.
			flag1, err := cmd.Flags().GetString("image-refs")
			flag2, err := cmd.Flags().GetString("file-checksums")
			if flag1 == "" && flag2 == "" {
				err = fmt.Errorf("you must specify either image-refs or file-checksums flag")
			}
			return err
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			config = pkg.LoadParameters(config)
			attestation := pkg.GenerateAttestation(config)
			output, err := cmd.Flags().GetString("output")
			if err = attestation.Write(output); err != nil {
				return fmt.Errorf("failed to write attestation: %v", err)
			}
			return nil
		},
	}
	rootCmd.Flags().StringVar(&config.CloneLogPath, "clone-log", "", "path to clone.json generated by Prow")
	rootCmd.Flags().StringVar(&config.ImageReferencePath, "image-refs", "", "path to the file of the image references generated by ko")
	rootCmd.Flags().StringVar(&config.FileCheckSumPath, "file-checksums", "", "path to file checksums generated during the build")
	rootCmd.Flags().String("output", "attestation.json", "path to the file where the attestation will be written to")
	rootCmd.MarkFlagsMutuallyExclusive("image-refs", "file-checksums")
	rootCmd.MarkFlagRequired("clone-log")
	if err := rootCmd.Execute(); err != nil {
		os.Exit(1)
	}
}
