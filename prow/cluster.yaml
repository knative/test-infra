# Copyright 2018 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file contains Kubernetes YAML files for the most important prow components.
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: prowjobs.prow.k8s.io
spec:
  group: prow.k8s.io
  version: v1
  names:
    kind: ProwJob
    singular: prowjob
    plural: prowjobs
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            max_concurrency:
              type: integer
              minimum: 0
            type:
              type: string
              enum:
              - "presubmit"
              - "postsubmit"
              - "periodic"
              - "batch"
        status:
          properties:
            state:
              type: string
              enum:
              - "triggered"
              - "pending"
              - "success"
              - "failure"
              - "aborted"
              - "error"
          anyOf:
          - not:
              properties:
                state:
                  type: string
                  enum:
                  - "success"
                  - "failure"
                  - "error"
                  - "aborted"
          - required:
            - completionTime
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hook
  labels:
    app: hook
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hook
    spec:
      terminationGracePeriodSeconds: 180
      containers:
      - name: hook
        image: gcr.io/k8s-prow/hook:v20180709-7109caeb1
        imagePullPolicy: Always
        args:
        - --dry-run=false
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
      volumes:
      - name: hmac
        secret:
          secretName: hmac-token
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
      - name: plugins
        configMap:
          name: plugins
---
apiVersion: v1
kind: Service
metadata:
  name: hook
spec:
  selector:
    app: hook
  ports:
  - port: 8888
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: plank
  labels:
    app: plank
spec:
  replicas: 1 # Do not scale up.
  template:
    metadata:
      labels:
        app: plank
    spec:
      containers:
      - name: plank
        image: gcr.io/k8s-prow/plank:v20180709-7109caeb1
        args:
        - --dry-run=false
        - --tot-url=http://tot
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sinker
  labels:
    app: sinker
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sinker
    spec:
      containers:
      - name: sinker
        image: gcr.io/k8s-prow/sinker:v20180709-7109caeb1
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: deck
  labels:
    app: deck
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: deck
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: deck
        image: gcr.io/k8s-prow/deck:v20180709-7109caeb1
        args:
        - --hook-url=http://hook:8888/plugin-help
        - --tide-url=http://tide/
        ports:
          - name: http
            containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
---
apiVersion: v1
kind: Service
metadata:
  name: deck
spec:
  selector:
    app: deck
  ports:
  - port: 80
    targetPort: 8080
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: horologium
  labels:
    app: horologium
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: horologium
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: horologium
        image: gcr.io/k8s-prow/horologium:v20180709-7109caeb1
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config

# Ingresses

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: deck-ing
  annotations:
    kubernetes.io/ingress.class: "gce"
spec:
  rules:
  - host: prow.knative.dev
    http:
      paths:
      - path: /*
        backend:
          serviceName: deck
          servicePort: 80
      - path: /hook
        backend:
          serviceName: hook
          servicePort: 8888

# cmd/tot

apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    app: tot
  name: tot-storage
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  gcePersistentDisk:
    pdName: tot-storage
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: tot
  name: tot-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tot
  labels:
    app: tot
spec:
  replicas: 1  # one canonical source of build numbers
  template:
    metadata:
      labels:
        app: tot
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: tot
        image: gcr.io/k8s-prow/tot:v20180709-7109caeb1
        imagePullPolicy: Always
        args:
        - -storage=/store/tot.json
        - -fallback
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - mountPath: /store
          name: tot-volume
      volumes:
        - name: tot-volume
          persistentVolumeClaim:
            claimName: tot-storage
---
apiVersion: v1
kind: Service
metadata:
  name: tot
spec:
  selector:
    app: tot
  ports:
  - port: 80
    targetPort: 8888
  type: NodePort
---

# Tide

apiVersion: v1
kind: Service
metadata:
  name: tide
spec:
  selector:
    app: tide
  ports:
  - port: 80
    targetPort: 8888
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tide
  labels:
    app: tide
spec:
  replicas: 1 # Do not scale up.
  template:
    metadata:
      labels:
        app: tide
    spec:
      containers:
      - name: tide
        image: gcr.io/k8s-prow/tide:v20180625-90124aa3f
        args:
        - --dry-run=false
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config

